// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiScrapingData.Infrastructure.Data;

#nullable disable

namespace WebApiScrapingData.Infrastructure.Migrations
{
    [DbContext(typeof(ScrapingContext))]
    [Migration("20231214125836_UpdateLibelleQuestionType")]
    partial class UpdateLibelleQuestionType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Attaque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TypeAttaqueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypePokId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeAttaqueId");

                    b.HasIndex("TypePokId");

                    b.ToTable("Attaques");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.DataInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionTalent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionVx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionVy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Evolutions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Talent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Types")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weakness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenEvolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DataInfos");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BasicHappiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaptureRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("EggMoves")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Id_CN")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_CO")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_DE")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_EN")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_ES")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_FR")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_IT")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_JP")
                        .HasColumnType("bigint");

                    b.Property<long>("Id_RU")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathSound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathSprite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatAttaque")
                        .HasColumnType("int");

                    b.Property<int>("StatAttaqueSpe")
                        .HasColumnType("int");

                    b.Property<int>("StatDefense")
                        .HasColumnType("int");

                    b.Property<int>("StatDefenseSpe")
                        .HasColumnType("int");

                    b.Property<int>("StatPv")
                        .HasColumnType("int");

                    b.Property<int>("StatTotal")
                        .HasColumnType("int");

                    b.Property<int>("StatVitesse")
                        .HasColumnType("int");

                    b.Property<string>("TypeEvolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlSound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlSprite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Id_CN");

                    b.HasIndex("Id_CO");

                    b.HasIndex("Id_DE");

                    b.HasIndex("Id_EN");

                    b.HasIndex("Id_ES");

                    b.HasIndex("Id_FR");

                    b.HasIndex("Id_IT");

                    b.HasIndex("Id_JP");

                    b.HasIndex("Id_RU");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Attaque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AttaqueId")
                        .HasColumnType("bigint");

                    b.Property<string>("CTCS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PokemonId")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeLearn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttaqueId");

                    b.HasIndex("PokemonId");

                    b.ToTable("Pokemon_Attaque");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Talent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<long>("PokemonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TalentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TalentId");

                    b.ToTable("Pokemon_Talent");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_TypePok", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PokemonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypePokId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TypePokId");

                    b.ToTable("Pokemon_TypePok");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Weakness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PokemonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypePokId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TypePokId");

                    b.ToTable("Pokemon_Weakness");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Difficulty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Libelle_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DataObjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long?>("QuestionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Question_Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Answer");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuizzId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizzId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer_Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("QuestionAnswerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionAnswerId");

                    b.ToTable("QuestionAnswer_Answer");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DifficultyId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlurred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGrayscale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleAnswers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameType")
                        .HasColumnType("bit");

                    b.Property<string>("Libelle_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbAnswers")
                        .HasColumnType("int");

                    b.Property<int>("NbAnswersPossible")
                        .HasColumnType("int");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Quizz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<bool>("Easy")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen1")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen2")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen3")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen4")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen5")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen6")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen7")
                        .HasColumnType("bit");

                    b.Property<bool>("Gen8")
                        .HasColumnType("bit");

                    b.Property<bool>("GenArceus")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Hard")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Normal")
                        .HasColumnType("bit");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Quizzs");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Quizz_Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuizzId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizzId");

                    b.ToTable("Quizz_Question");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuizzDifficulty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Easy")
                        .HasColumnType("bit");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Hard")
                        .HasColumnType("bit");

                    b.Property<bool>("Normal")
                        .HasColumnType("bit");

                    b.Property<long?>("QuizzId")
                        .HasColumnType("bigint");

                    b.Property<string>("ResumeQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizzId");

                    b.ToTable("QuizzDifficulties");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Talent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Talents");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.TypeAttaque", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypeAttaques");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.TypePok", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathAutoHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathFondGo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathIconHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniGo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_CN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_CO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_DE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_ES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_FR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_IT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_JP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathMiniHome_RU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlAutoHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFondGo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlIconHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlMiniGo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlMiniHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserModification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versionModification")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypesPok");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Attaque", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.TypeAttaque", "TypeAttaque")
                        .WithMany()
                        .HasForeignKey("TypeAttaqueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApiScrapingData.Domain.Class.TypePok", "TypePok")
                        .WithMany()
                        .HasForeignKey("TypePokId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TypeAttaque");

                    b.Navigation("TypePok");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "CN")
                        .WithMany()
                        .HasForeignKey("Id_CN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "CO")
                        .WithMany()
                        .HasForeignKey("Id_CO")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "DE")
                        .WithMany()
                        .HasForeignKey("Id_DE")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "EN")
                        .WithMany()
                        .HasForeignKey("Id_EN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "ES")
                        .WithMany()
                        .HasForeignKey("Id_ES")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "FR")
                        .WithMany()
                        .HasForeignKey("Id_FR")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "IT")
                        .WithMany()
                        .HasForeignKey("Id_IT")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "JP")
                        .WithMany()
                        .HasForeignKey("Id_JP")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.DataInfo", "RU")
                        .WithMany()
                        .HasForeignKey("Id_RU")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CN");

                    b.Navigation("CO");

                    b.Navigation("DE");

                    b.Navigation("EN");

                    b.Navigation("ES");

                    b.Navigation("FR");

                    b.Navigation("Game");

                    b.Navigation("IT");

                    b.Navigation("JP");

                    b.Navigation("RU");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Attaque", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Attaque", "Attaque")
                        .WithMany("Pokemon_Attaques")
                        .HasForeignKey("AttaqueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.Pokemon", "Pokemon")
                        .WithMany("Pokemon_Attaques")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attaque");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Talent", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Pokemon", "Pokemon")
                        .WithMany("Pokemon_Talents")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.Talent", "Talent")
                        .WithMany("Pokemon_Talents")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_TypePok", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Pokemon", "Pokemon")
                        .WithMany("Pokemon_TypePoks")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.TypePok", "TypePok")
                        .WithMany("Pokemon_TypePoks")
                        .HasForeignKey("TypePokId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("TypePok");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon_Weakness", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Pokemon", "Pokemon")
                        .WithMany("Pokemon_Weaknesses")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.TypePok", "TypePok")
                        .WithMany("Pokemon_Weaknesses")
                        .HasForeignKey("TypePokId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("TypePok");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Question", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Question_Answer", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Question", "Question")
                        .WithMany("Question_Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Quizz", "Quizz")
                        .WithMany()
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer_Answer", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswer_Answers")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionType", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Quizz", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Quizz_Question", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Quizz", "Quizz")
                        .WithMany("Quizz_Questions")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuizzDifficulty", b =>
                {
                    b.HasOne("WebApiScrapingData.Domain.Class.Quizz.Quizz", "Quizz")
                        .WithMany()
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Quizz");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Attaque", b =>
                {
                    b.Navigation("Pokemon_Attaques");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Pokemon", b =>
                {
                    b.Navigation("Pokemon_Attaques");

                    b.Navigation("Pokemon_Talents");

                    b.Navigation("Pokemon_TypePoks");

                    b.Navigation("Pokemon_Weaknesses");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Question", b =>
                {
                    b.Navigation("Question_Answers");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.QuestionAnswer", b =>
                {
                    b.Navigation("QuestionAnswer_Answers");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Quizz.Quizz", b =>
                {
                    b.Navigation("Quizz_Questions");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.Talent", b =>
                {
                    b.Navigation("Pokemon_Talents");
                });

            modelBuilder.Entity("WebApiScrapingData.Domain.Class.TypePok", b =>
                {
                    b.Navigation("Pokemon_TypePoks");

                    b.Navigation("Pokemon_Weaknesses");
                });
#pragma warning restore 612, 618
        }
    }
}
